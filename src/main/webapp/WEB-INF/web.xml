<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
	version="2.4">
	<description>ims</description>
	<icon>
		<small-icon>/favicon.ico</small-icon>
	</icon>
	<distributable />
	<context-param>
		<param-name>exceptInclude</param-name>
		<param-value>jpg|jpeg|gif|png|js|css|swf</param-value>
	</context-param>
	<context-param>
		<param-name>AppCode</param-name>
		<param-value>c23b8bdf7772f1343b85636943e3d96f</param-value>
	</context-param>
	<!-- spring配置文件读取路径 多个配置以逗号或者空格分隔 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext.xml</param-value>
	</context-param>
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:properties/log4j.properties</param-value>
	</context-param>
	<!-- kaptcha验证码配置 -->
	<servlet>
		<!-- 生成图片的Servlet -->
		<servlet-name>KaptchaServlet</servlet-name>
		<servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
		<!-- 是否有边框 -->
		<init-param>
			<param-name>kaptcha.border</param-name>
			<param-value>no</param-value>
		</init-param>
		<!-- 字体颜色 -->
		<init-param>
			<param-name>kaptcha.textproducer.font.color</param-name>
			<param-value>red</param-value>
		</init-param>
		<!-- 图片宽度 -->
		<init-param>
			<param-name>kaptcha.image.width</param-name>
			<param-value>70</param-value>
		</init-param>
		<!-- 使用哪些字符生成验证码 -->
		<init-param>
			<param-name>kaptcha.textproducer.char.string</param-name>
			<param-value>23456789abcdefghjkmnprstuvwxy</param-value>
		</init-param>
		<!-- 图片高度 -->
		<init-param>
			<param-name>kaptcha.image.height</param-name>
			<param-value>23</param-value>
		</init-param>
		<!-- 字体大小 -->
		<init-param>
			<param-name>kaptcha.textproducer.font.size</param-name>
			<param-value>18</param-value>
		</init-param>
		<!-- 验证码文本字符间距 -->
		<init-param>
			<param-name>kaptcha.textproducer.char.space</param-name>
			<param-value>3</param-value>
		</init-param>
		<!-- 干扰线 -->
		<init-param>
			<param-name>kaptcha.noise.impl</param-name>
			<param-value>com.google.code.kaptcha.impl.NoNoise</param-value>
		</init-param>
		<!-- 字符个数 -->
		<init-param>
			<param-name>kaptcha.textproducer.char.length</param-name>
			<param-value>5</param-value>
		</init-param>
		<!-- 使用哪些字体 -->
		<init-param>
			<param-name>kaptcha.textproducer.font.names</param-name>
			<param-value>Arial</param-value>
		</init-param>
		<init-param>
			<param-name>kaptcha.obscurificator.impl</param-name>
			<param-value>com.raising.system.modules.zara.web.controller.NoGimpy</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>KaptchaServlet</servlet-name>
		<url-pattern>/Kaptcha.jpg</url-pattern>
	</servlet-mapping>

	<!-- 静态资源，Tomcat, Jetty, JBoss, and GlassFish 默认 Servlet的名字"default" WebLogic 默认 Servlet的名字 "FileServlet" ,WebSphere默认 Servlet的名字 "SimpleFileServlet" -->
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ico</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.xml</url-pattern>
	</servlet-mapping>
	<!-- 前台用户登录 -->
	<!-- <servlet-mapping> <servlet-name>SpringMVC</servlet-name> <url-pattern>/v/*</url-pattern> </servlet-mapping> -->
	<!-- 后台管理 -->
	<!-- <servlet-mapping> <servlet-name>SpringMVC</servlet-name> <url-pattern>/**/admin/*</url-pattern> </servlet-mapping> -->
	<!-- <filter> <description>不允许直接访问的页面过滤器，如直接访问JSP</description> <filter-name>NoJSPFilter</filter-name> <filter-class>com.raising.system.filter.JSPFilter</filter-class> 
		<init-param> <param-name>goPageUrl</param-name> <param-value>/</param-value> </init-param> </filter> <filter-mapping> <filter-name>NoJSPFilter</filter-name> 
		<url-pattern>*.jsp</url-pattern> </filter-mapping> -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<servlet-name>SpringMVC</servlet-name>
	</filter-mapping>
 
 
	<!-- <filter> <description>针对用户访问的URL,判断对URI是否有访问权限，防止直接地址栏输入URL的情况</description> <filter-name>UriFilter</filter-name> <filter-class>com.raising.system.filter.UriFilter</filter-class> 
		<init-param> <param-name>targetFilterLifecycle</param-name> <param-value>true</param-value> </init-param> </filter> <filter-mapping> <description>权限管理</description> 
		<filter-name>UriFilter</filter-name> <servlet-name>SpringMVC</servlet-name> </filter-mapping> -->

	<filter>
		<description>开放SpringMVC的其他提交动作，如 Method:UPDATE、PUT等</description>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<servlet-name>SpringMVC</servlet-name>
		<!-- <dispatcher>INCLUDE</dispatcher> <dispatcher>FORWARD</dispatcher> <dispatcher>REQUEST</dispatcher> <dispatcher>ERROR</dispatcher> -->
	</filter-mapping>
	<listener>
		<description>spring侦听器</description>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<description><!-- 扩展spring bean的作用域有request,session,global session等使Spring支持request与session的scope, 如:<bean id="loginAction" class="com.foo.LoginAction" scope="request"/> --></description>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<listener>
		<description>Spring 刷新Introspector防止内存泄露</description>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<servlet>
		<description>自己扩展了一个Spring的MVCServlet,用于对一些静态资源可以直接访问,即exceptInclude中定义的后缀名称,org.springframework.web.servlet.DispatcherServlet
		</description>
		<servlet-name>SpringMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/controller/spring-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>SpringMVC</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- <servlet-mapping> <servlet-name>SpringMVC</servlet-name> <url-pattern>*.c</url-pattern> </servlet-mapping> <servlet-mapping> <servlet-name>SpringMVC</servlet-name> 
		<url-pattern>*.ajax</url-pattern> </servlet-mapping> -->
	<!-- OS缓存配置 -->
	<!-- <filter> <filter-name>CacheFilter</filter-name> <filter-class>com.opensymphony.oscache.web.filter.CacheFilter</filter-class> <init-param> <param-name>time</param-name> 
		<param-value>10000</param-value> </init-param> <init-param> <param-name>scope</param-name> <param-value>session</param-value> </init-param> </filter> <filter-mapping> 
		<filter-name>CacheFilter</filter-name> <servlet-name>SpringMVC</servlet-name> </filter-mapping> -->
	<!-- Session 失效时间30分钟 -->
	<session-config>
		<session-timeout>60</session-timeout>
	</session-config>
	<mime-mapping>
		<extension>htc</extension>
		<mime-type>text/x-component</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>xml</extension>
		<mime-type>text/xml</mime-type>
		<!-- application/xml -->
	</mime-mapping>
	<mime-mapping>
		<extension>rar</extension>
		<mime-type>application/rar-file</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>zip</extension>
		<mime-type>application/zip</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>xls</extension>
		<mime-type>application/vnd.ms-excel</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>doc</extension>
		<mime-type>application/vnd.ms-word</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>ppt</extension>
		<mime-type>application/vnd.ms-powerpoint</mime-type>
	</mime-mapping>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- 页面不存在的Error Page定义 -->
	<error-page>
		<exception-type>javax.servle.ServletException</exception-type>
		<location>/inc/error/servletException.jsp</location>
	</error-page>
	<error-page>
		<exception-type>org.apache.jasper.JasperException</exception-type>
		<location>/inc/error/servletException.jsp</location>
	</error-page>
	<error-page>
		<error-code>400</error-code>
		<location>/inc/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/inc/error/403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/inc/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/inc/error/405.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/inc/error/500.jsp</location>
	</error-page>
	<!-- 配置标签库及JSP页面编码 -->
 
	<!-- 错误页面 <error-page> <exception-type>com.raising.system.exception.UserLoginException</exception-type> <location>/inc/error/userLoginException.jsp</location> 
		</error-page> <error-page> <exception-type>java.lang.Exception</exception-type> <location>/inc/error/exception.jsp</location> </error-page> -->
	<!-- <login-config> <auth-method>BASIC</auth-method> </login-config> -->
	<!-- Authorization setting for SSL -->
	<!-- <login-config> <auth-method>CLIENT-CERT</auth-method> <realm-name>Client Cert Users-only Area</realm-name> <login-config> -->
	<!-- SSL HTTPS -->
	<!-- <security-constraint> <web-resource-collection> <web-resource-name>SSL</web-resource-name> <url-pattern>/*</url-pattern> </web-resource-collection> 
		<user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> </user-data-constraint> </security-constraint> -->
</web-app>
